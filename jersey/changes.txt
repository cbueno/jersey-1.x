release 0.5 (2008-01-18)
- Updated NetBeans project files of Jersey and the examples files to 
  version 6.0
- Fixed bug for HTTP methods on a super class that have an entity parameter 
  that is a (generic) type variable.
- Fixed bug for injecting onto fields of a super class
- Fixed issue 25: UriBuilder uri() not concatinating properly
  https://jersey.dev.java.net/issues/show_bug.cgi?id=25
- Grizzly support is upgraded to the latest jars.
- Grizzly and the LW HTTP server now now easy ways to start a server
  deployed with root resource classes, see: 
  - com.sun.ws.rest.api.container.grizzly.GrizzlyServerFactory
  - com.sun.ws.rest.api.container.httpserver.HttpServerFactory
- Fixed issue 1: Matching errors for sub-resource methods with equivalent URI 
  template regexs but different template variables
  https://jersey.dev.java.net/issues/show_bug.cgi?id=1
  Different sub-resource locator and HTTP methods may have different
  URI templates that differ only by template variable name.
- Removed the com.sun.ws.rest.api.core.WebResource interface and resource class
  support for this interface.
- Root resource classes, by default, are now found at runtime (rather than
  compile time) by efficiently scanning the Java class files of the 
  java.class.path for SE-based deployments or the WEB-INF/lib and 
  WEB-INF/classes for Servlet-based deployments.
  See the JavaDoc of the following classes for more details:
    - com.sun.ws.rest.api.container.ContainerFactory
    - com.sun.ws.rest.spi.container.servlet.ServletContainer
- JAXB XML and JSON support now split into separate implementations,
  and the former no longer requires the jars of the latter in the classpath.
- Partially integrated JSR 311 API 0.5
  - EntityProvider is split into two separate interfaces
    MessageBodyReader and MessageBodyWriter
  - java.ws.rs.UriTemplate renamed to java.ws.rs.Path
  - javax.ws.rs.core.UriInfo has the following changes:
    - renamed method getBase to getBaseUri
    - renamed method getBaseBuilder to getBaseUriBuilder
    - renamed method getAbsolute to getAbsolutePath
    - renamed method getBuilder to getAbsolutePathBuilder
    - add methods getRequestUri and getRequestUriBuilder
  - Refactored @HttpMethod:
    - @HttpMethod is now a meta-annotation
    - Specific annotations @HEAD, @GET, @PUT, @DELETE and @POST replace 
      @HttpMethod("<method") and @HttpMethod with the HTTP method derived 
      from the Java method name.
  - javax.ws.rs.core.Response has the following changes:
    - Changed from interface to abstract class
    - Static methods on Response.Builder moved to Response 
      (and in some cases renamed).
    - Changed method "addMetaData(MultivaluedMap)" to 
      "MultivaluedMap getMetaData()"
  - HTTP header related classes have the following changes:
    - Where appropriate such classes have a static parse method
      to create an instance from a String representation, for example
      MediaType m = MediaType.parse("text/plain") instead of a constructor.
    - All classes override toString for serialization
    - javax.ws.rs.core.Cookie is changed to an immutable class
    - javax.ws.rs.core.NewCookie is changed to an immutable class

release 0.4 (2007-11-02)
- Fixed issue 17: Matrix Parameter With URL Value Ends Up With 404
  https://jersey.dev.java.net/issues/show_bug.cgi?id=17
  A specific JVM option parameter is required to be set when using
  Glassfish (see issue for details).
- Added matrix and header param support to WADL
- Fixed issue 19: java.lang.StringIndexOutOfBoundsException for 
  LW HTTP container
  https://jersey.dev.java.net/issues/show_bug.cgi?id=19
- Integrated JSR 311 API 0.4.
- The runtime no longer logs the stack trace for a caught 
  WebApplicationException with a status code < 500. 
- Fixed bug in File entity provider, the FileInput/OutputStream is
  wrapped around a BufferedInput/OutputStream.
- Fixed bug in InputStream and DataStource entity providers, after the bytes 
  read from the InputStream have been written the InputStream is closed.
- Added new example, Mandel, for accessing Mandelbrots as a web service.
  The example is written in Scala and uses Scala actors.
- Support the @Encoded on class, constructors, method and method parameters.
  https://jsr311.dev.java.net/nonav/javadoc/javax/ws/rs/Encoded.html
  Advanced developers may work in the encoded space of URI parameters,
  query parameters and matrix parameters by declaring this annotation on
  a class, method or method parameter.
- Updated URI template ordering to conform to latest changes in JAX-RS:
  "Sort the set of matching resource classes using the number of 
   characters in the regular expression not resulting from template 
   variables as the primary key and the number of matching groups 
   as a secondary key"
  This means that a URI template such as "/edit" will take precedence over 
  a URI template such as /{id}, where as previously this was not the case.
- Fixed issue 13: Create AbstractServletAdapter class that allows modification 
  of its WebApplication
  https://jersey.dev.java.net/issues/show_bug.cgi?id=13
  The servlet implementation has been split into two. The servlet,
  com.sun.ws.rest.spi.container.servlet.ServletContainer may be used
  directly or extended for additional configuration requirements.

release 0.3 (2007-09-21)
- ResourceConfig interface is modified to support a feature bag and property
  bag with documented standard features.
  DefaultResourceConfig is mutable implementation of ResourceConfig.
  The APT tool generates ResourceConfig classes that inherit from 
  DefaultResourceConfig.
- Created SPI container helper classes AbstractContainerRequest and
  AbstractContainerResponse.
  This makes it easier for developers to write and maintain their own
  containers. Previously it was necessary to implement the interfaces
  ContainerRequest and ContainerResponse or depend on the implementation 
  specific classes HttpRequestContextImpl and HttpResponseContextImpl.
- Fixed issue 8: apt tool silently overwrites existing web.xml by default
  The "noservlet" option used with the WebResourcesProcessorTask ant task
  has been removed so that by default Servlet is not assumed no overriding 
  of a web.xml occurs. A new option "servlet" replaces the old option and is 
  required to be set for the ant task (and apt tool) to generate a web.xml.
- Fixed issue 2: URI path matching should operate on the encoded path
  https://jersey.dev.java.net/issues/show_bug.cgi?id=2
- Integrated JSR 311 API 0.3.
  The class javax.ws.rs.core.UriBuilder is implemented. This is the preferred
  way to create URIs.
  Method names on javax.ws.rs.core.UriInfo were modified, the string "URI"
  or "Uri" was removed.
  The methods javax.ws.rs.ext.EntityProvider#readFrom/writeTo take
  a MediaType as a paramater, which corresponds to the "Content-Type"
  HTTP header field.
- Correctly support the writing of responses for the method signature:
    void <method>(HttpRequestContext, HttpResponseContext)
  this includes the method signature for resources that implement the interface
  com.sun.ws.rest.api.core.WebResource.
  An entity may be directly written by the application by obtaining an 
  OutputStream from the HttpResponseContext.getOutputStream() method.
- New SPI com.sun.ws.rest.spi.resource.* replaces com.sun.ws.rest.spi.resolver.*
  Supports addition of new resource providers that are responsible for creating 
  resource class instances and managing their lifecycle. The provider for a 
  particular resource class is set via the ResourceFactory meta-annotation, 
  see com.sun.ws.rest.spi.resource.Singleton for an example of its usage. 
  Default lifecycle for resource class instances is per-request, the prior 
  behaviour can be obtained by annotating a resource class with 
  com.sun.ws.rest.spi.resource.Singleton. Resource class constructors with a 
  per-request lifecycle can now have the same parameters as methods annotated 
  with HttpMethod.

release 0.2.1 (2007-09-04)
- Fixed issue 4: Unsed jars required to be included in the class path for use 
  of certain entity providers
  https://jersey.dev.java.net/issues/show_bug.cgi?id=4
- JsonFromJaxb example added to demonstrate using JSON representation 
  of JAXB based resources
- 'jersey-on-glassfish.xml' ant script added to distribution
  so that users can install jersey jars, docs and examples on GlassFish
- Simpler getting started document included.
- Fixed bug that caused matrix parameters to be decoded twice.
- JAXB beans can be serialized as JSON or XML using one HTTP method with
  a @ProduceMime({"application/xml", "application/json"}).
- For an HTTP method that produces more than one media type automatically
  select the appropriate media type according to what is acceptable. This
  enables a developer to implement one method for the returning of a JAXB 
  bean that can be serialized as XML or JSON.
- Rename the zip of the Jersey respository from 'jersey-src' to 
  'jersey-snapshot'.
- Include zip of 311 src and Jersey src in the lib directory of the 
  distribution to faciliate easier debugging.
- Fixed bug in light weight HTTP server container that caused query parameters
  to be decoded twice and incorrectly extracted from the URI query string.
- JSON entity providers added to support JSONArray and JSONObject 
  entities from Jettison.

release 0.2 (2007-07-19)
- include Allow header in a 405 (Method Not Allowed) response.
- support by default OPTIONS request if OPTIONS is not implemented.
- support by default HEAD request if HEAD is not implemented by calling GET 
  and removing the entity.
- fixed WADL generation mixing up produce/consume information when generating
  responses.
- fixed WADL generation not correctly determining the HTTP method from 
  @HttpMethod Java method name.
- WebApplication.initiate can only be called once. Throw exception on subsequent
  calls.
- Removed implementation of @SubResources, equivalent functionality supported 
  by sub-resource locator methods.
- Removed implementation of @UnmatchedPath, equivalent functionality supported 
  by greedy parameter on @UriTemplate.
- JSON support added to JAXB entity provider for use with "application/json",
  media type. BadgerFish convention is used. Runtime dependency on jettison jar.
- Views refactored to work correctly in combination with HTTP methods
- removed the @SubResource annotation from the examples
- removed Entity class, equivalent functionality is supported by the 
  javax.ws.rs.core.HttpHeaders class
- Bookmark example added
- include 311 API distribution, src and javadoc
- fixed the formatting of java.util.Date for HTTP-date to conform to RFC 1123
- refactored API/SPI messages
- include jersey API/SPI javadoc
- URIs and URI templates with escaped space character throw exception for 
  URI.create, found by Julian Reschke:
  https://jersey.dev.java.net/servlets/ReadMsg?list=dev&msgNo=1 
- include version information in manifest of jersey.jar

release 0.1 (2007-06-19)
- initial stable snapshot
