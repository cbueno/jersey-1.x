<?xml version="1.0" encoding="UTF-8"?>
<!--
   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

   Copyright 2007 Sun Microsystems, Inc. All rights reserved. 

   The contents of this file are subject to the terms of the Common Development
   and Distribution License("CDDL") (the "License").  You may not use this file
   except in compliance with the License. 

   You can obtain a copy of the License at:
       https://jersey.dev.java.net/license.txt
   See the License for the specific language governing permissions and
   limitations under the License.

   When distributing the Covered Code, include this CDDL Header Notice in each
   file and include the License file at:
       https://jersey.dev.java.net/license.txt
   If applicable, add the following below this CDDL Header, with the fields
   enclosed by brackets [] replaced by your own identifying information:
       "Portions Copyrighted [year] [name of copyright owner]"
-->
<project name="Jersey" default="jar" basedir=".">
    <description>Builds, tests, and runs project Jersey.</description>
    <import file="nbproject/build-impl.xml"/>
    
    <!-- initialize build properties -->
    <property file="${basedir}/build.properties" />
    
    <property name="tools.jar" value="${java.home}/../lib/tools.jar"/>
    <condition property="tools.jar" value="${java.home}/lib/tools.jar">
        <available type="file" file="${java.home}/lib/tools.jar"/>
    </condition>
    
    <!-- task that generates a manifest file -->
    <macrodef name="createManifest">
        <attribute name="file"/>
        <sequential>
            <copy tofile="@{file}"
                  file="${manifest.root}/manifest.mf"
                  overwrite="yes"/>
            <replace file="@{file}">
                <replacefilter token="@@@@SPEC_VERSION@@@@"
                               value="${release.spec.version}" />
                <replacefilter token="@@@@IMPL_VERSION@@@@"
                               value="${release.impl.version}"/>
                <replacefilter token="@@@@VENDOR_ID@@@@"
                               value="com.sun"/>
                <replacefilter token="@@@@BUILD_ID@@@@"
                               value="${build.id}"/>
            </replace>
        </sequential>
    </macrodef>
    
    <taskdef name="resourcegen" classname="com.sun.tools.localizer.resourcegen.ResourceGenTask">
        <classpath>
            <fileset dir="lib" includes="*.jar" />
        </classpath>
    </taskdef>    
    
    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
      <classpath>
        <fileset dir="lib" includes="*.jar" />
      </classpath>
    </taskdef>
    
    <target name="-pre-compile">
        <tstamp>
            <format property="now" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
        </tstamp>
        <property name="build.id" value="${now}(${user.name})" />
        <property name="build.version" value="${release.impl.version}-${build.id}-${release.impl.version.suffix}" />
        <echo message="The build id is: ${build.version}" />
        
        <createManifest file="${basedir}/build/manifest.mf"/>
        
        <resourcegen destDir="build/gen-src">
            <resource dir="src/api" includes="**/*.properties"/>
        </resourcegen>    
        <resourcegen destDir="build/gen-src">
            <resource dir="src/spi" includes="**/*.properties"/>
        </resourcegen>    
        <resourcegen destDir="build/gen-src">
            <resource dir="src/impl" includes="**/*.properties"/>
        </resourcegen>
        
        <echo message="Compiling the schema..." />
        <xjc schema="etc/wadl.xsd" catalog="etc/catalog.xml" package="com.sun.research.ws.wadl" destDir="build/gen-src">
            <produces dir="build/gen-src/com/sun/research/ws/wadl" includes="**/*.java" />
        </xjc>
    </target>
    
    <target name="-post-compile">
        <!-- Include the localizer jar in the classes -->
	<unzip src="lib/localizer.jar" dest="build/classes">
            <patternset>
                <exclude name="META-INF/**"/>
            </patternset>
        </unzip>
    </target>
   
    <!-- Distribution tasks -->

    <target name="dist-snapshot" depends="jar, javadoc, findbugs">
        <!-- create source zip -->
        <zip destfile="${basedir}/dist/${release.impl.basename}.src.zip">
            <fileset dir="src/api"/>
            <fileset dir="src/spi"/>
            <fileset dir="src/impl"/>
            <fileset dir="build/gen-src"/>
        </zip>
        
        <!-- clean, build clean the examples -->
        <ant dir="examples" target="clean"/>
        <ant dir="examples" target="build"/>
        <ant dir="examples" target="clean"/>
        
        <!-- create a zip file of the source distribution -->
        <delete file="${basedir}/dist/${release.snapshot.name}.zip"/>
        <delete file="${basedir}/dist/${release.snapshot.basename}.zip"/>
        <zip destfile="${basedir}/dist/${release.snapshot.name}.zip"
             basedir=".."
             includes="jersey/**"
             excludes="jersey/findbugs/** jersey/emma/** jersey/examples/Mandel/scala/**"/>
        <!-- copy to non-versioned name -->
        <copy file="${basedir}/dist/${release.snapshot.name}.zip" 
              tofile="${basedir}/dist/${release.snapshot.basename}.zip"/>
    </target>
    
    <target name="dist-release" depends="dist-snapshot">
        <!-- create lib -->
        <mkdir dir="${release.impl.dir}/lib"/>
        <!-- copy src -->
        <copy file="${basedir}/dist/${release.impl.basename}.src.zip" 
              todir="${release.impl.dir}/lib"/>
        <!-- copy jar -->
        <copy file="${dist.jar}" 
              todir="${release.impl.dir}/lib"/>
        <!-- copy runtime dependent jars -->
        <copy todir="${release.impl.dir}/lib">
            <fileset dir="${basedir}/lib" excludes="junit*.jar"/>
        </copy>
        
        <!-- license -->
        <copy file="${basedir}/license.txt" 
              todir="${release.impl.dir}"/>
        <copy file="${basedir}/thirdparty_license.txt" 
              todir="${release.impl.dir}"/>
        
        <!-- create jersey docs -->
        <copy todir="${release.impl.dir}/docs/jersey-api">
            <fileset dir="${dist.javadoc.dir}"/>
        </copy>
        <!-- include 311 docs -->
        <unzip src="${basedir}/jsr311/jsr311-api.zip"
        dest="${dist.dir}/jsr311"/>
        <copy todir="${release.impl.dir}/docs">
            <fileset dir="${dist.dir}/jsr311/docs"/>
        </copy>
        
        <copy todir="${release.impl.dir}/docs">
            <fileset dir="${basedir}/docs" excludes="manifest/**"/>
        </copy>
        
        <!-- create samples distribution -->
        <ant dir="examples" target="dist"/>
        
        <!-- copy installation ant scripts -->
        <copy file="${basedir}/etc/jersey-on-glassfish.xml" todir="${release.impl.dir}"/>

        <!-- create a zip file of the distribution -->
        <zip destfile="${basedir}/dist/${release.impl.name}.zip"
             basedir="${basedir}/dist"
             includes="${release.impl.name}/**"/>
        <!-- copy to non-versioned name -->
        <copy file="${basedir}/dist/${release.impl.name}.zip" 
              tofile="${basedir}/dist/${release.impl.basename}.zip"/>
    </target>
    
    <target name="dist" depends="dist-release"/>


    <!-- GlassFish Update Center Tasks -->

    <target name="create-uc-module" depends="clean-uc-module" description="Generate GlassFish Update Center Module"> 
      <antcall target="try-create-ucm-from-curdir"/>
      <antcall target="try-create-ucm-from-zip"/>
    </target>

    <target name="try-create-ucm-from-zip" if="uc.base.zip">
      <echo message="Creating GF UC module from ${uc.base.zip} file..."/>
      <delete dir="${basedir}/tmp"/>
      <mkdir dir="${basedir}/tmp"/>
      <unzip src="${uc.base.zip}" dest="${basedir}/tmp"/>
      <move todir="${basedir}/tmp">
        <fileset dir="${basedir}/tmp"/>
        <mapper type="regexp" from="jersey[^/]*(.*)" to="jersey-ucm-base\1"/>
      </move>
      <antcall target="do-create-ucm-from-dir">
        <param name="uc.base.dir" value="${basedir}/tmp/jersey-ucm-base"/>
      </antcall>
      <delete dir="${basedir}/tmp"/>
    </target>

    <target name="try-create-ucm-from-curdir" unless="uc.base.zip">
      <echo message="Creating GF UC module from current directory..."/>
      <!--antcall target="clean"/-->
      <!--antcall target="dist"/-->
      <antcall target="do-create-ucm-from-dir">
        <param name="uc.base.dir" value="${basedir}/dist/${release.impl.name}"/>
      </antcall>
    </target>

    <target name="do-create-ucm-from-dir" if="uc.base.dir"> 
      <mkdir dir="${basedir}/gf-uc/as-home"/>
      <ant dir="${uc.base.dir}" 
           antfile="jersey-on-glassfish.xml" 
           target="install" inheritAll="false">
        <property name="gf.home" value="${basedir}/gf-uc/as-home"/>
      </ant> 
      <!-- create a new module-gen dir structure for generated module content-->
      <mkdir dir="${basedir}/gf-uc/gen-module/Info"/>
      <mkdir dir="${basedir}/gf-uc/gen-module/module"/>
      <!-- create a zip archive for the module -->
      <zip destfile="${basedir}/gf-uc/gen-module/module/module_jersey.zip"
           basedir="${basedir}/gf-uc/as-home"/>
      <!-- copy and update the info.xml file for the module -->
      <copy file="${basedir}/gf-uc/module-skeleton/Info/info.xml"
            tofile="${basedir}/gf-uc/gen-module/Info/info.xml"/>
      <length file="${basedir}/gf-uc/gen-module/module/module_jersey.zip" property="uc.module.length"/>
      <replace file="${basedir}/gf-uc/gen-module/Info/info.xml" token="@@@@DOWNLOAD_SIZE@@@@" value="${uc.module.length}"/>
      <tstamp>
        <format property="uc.module.timestamp" pattern="ss/mm/hh/dd/MM/yyyy"/>
        <format property="uc.module.release.date" pattern="yyyy/MM/dd"/>
        <format property="uc.module.impl.version" pattern="yyyyMMddhhmm"/>
      </tstamp>
      <replace file="${basedir}/gf-uc/gen-module/Info/info.xml" token="@@@@MODULE_TIMESTAMP@@@@" value="${uc.module.timestamp}"/>
      <replace file="${basedir}/gf-uc/gen-module/Info/info.xml" token="@@@@MODULE_RELEASE_DATE@@@@" value="${uc.module.release.date}"/>
      <replace file="${basedir}/gf-uc/gen-module/Info/info.xml" token="@@@@MODULE_IMPL_VERSION@@@@" value="${uc.module.impl.version}"/>
      <replace file="${basedir}/gf-uc/gen-module/Info/info.xml" token="@@@@RELEASE_IMPL_VERSION@@@@" value="${release.impl.version}"/>
      <!-- create the final module -->
      <mkdir dir="${basedir}/gf-uc/dist"/>
      <jar basedir="${basedir}/gf-uc/gen-module"
           destfile="${basedir}/gf-uc/dist/module_jersey.nbm"/>
      <!-- update test Update Center dir -->
      <copy todir="${basedir}/gf-uc/updatecenter/beta/modules/jersey">
        <fileset dir="${basedir}/gf-uc/desc" includes="overview.html support.html tech-specs.html"/>
        <fileset dir="${basedir}/gf-uc/dist" includes="module_jersey.nbm"/>
      </copy> 
      <copy file="${basedir}/gf-uc/gen-module/Info/info.xml"
            tofile="${basedir}/gf-uc/updatecenter/beta/update-center.xml"/>
      <!-- update version info in descriptional html pages -->
      <replace file="${basedir}/gf-uc/updatecenter/beta/modules/jersey/overview.html" token="@@@@RELEASE_IMPL_VERSION@@@@" value="${release.impl.version}"/>
      <replace file="${basedir}/gf-uc/updatecenter/beta/modules/jersey/tech-specs.html" token="@@@@RELEASE_IMPL_VERSION@@@@" value="${release.impl.version}"/>
      <replace file="${basedir}/gf-uc/updatecenter/beta/modules/jersey/support.html" token="@@@@RELEASE_IMPL_VERSION@@@@" value="${release.impl.version}"/>
    </target>

    <target name="clean-uc-module" description="Clean UC related things">
      <delete dir="${basedir}/gf-uc/as-home"/>
      <delete dir="${basedir}/gf-uc/gen-module"/>
    </target>
 

    <!-- Javadoc tasks -->
    <!-- Override default javadoc to only document api and spi -->

    <target name="-javadoc-build" depends="compile">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc destdir="${dist.javadoc.dir}" 
                 source="${javac.source}" notree="${javadoc.notree}" 
                 use="${javadoc.use}" nonavbar="${javadoc.nonavbar}" 
                 noindex="${javadoc.noindex}" splitindex="${javadoc.splitindex}" 
                 author="${javadoc.author}" version="${javadoc.version}" 
                 windowtitle="${javadoc.windowtitle}" private="${javadoc.private}" 
                 additionalparam="${javadoc.additionalparam}" 
                 failonerror="true" useexternalfile="true">
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
            <sourcepath>
                <pathelement location="${src.api.dir}"/>
                <pathelement location="${src.spi.dir}"/>
            </sourcepath>
            <packageset dir="${src.api.dir}" includes="*/**"/>
            <packageset dir="${src.spi.dir}" includes="*/**"/>
            <fileset dir="${src.api.dir}" includes="*.java"/>
            <fileset dir="${src.spi.dir}" includes="*.java"/>
        </javadoc>
    </target>
    
    
    <!-- Unit tests tasks -->
    
    <taskdef name="junit2" classname="com.sun.ant.junit.JUnitTask">
        <classpath>
            <pathelement path="${basedir}/lib/junit-anttask.jar" />
            <pathelement path="${basedir}/lib/junit-3.8.1.jar" />
        </classpath>
    </taskdef>
    
    <target name="hudson-unit-tests" depends="init,-get-emma">
        <mkdir dir="build/emma"/>

        <property name="emma.dir" value="emma/emma-2.0.5312/lib" />

        <path id="emma.lib" >
          <pathelement location="${emma.dir}/emma.jar" />
          <pathelement location="${emma.dir}/emma_ant.jar" />
        </path>

        <taskdef resource="emma_ant.properties" classpathref="emma.lib" />

        <emma enabled="true">
          <instr
                instrpath="${build.classes.dir}"
                mode="overwrite" 
                metadatafile="build/emma/metadata.emma">
            <!-- ignore WADL generated JAXB classes -->
            <filter excludes="com.sun.research.*" />
          </instr>
        </emma>
        
        <path id="test.classpath">
            <fileset dir="${basedir}/lib" includes="*.jar"/>
            <pathelement location="${build.classes.dir}"/>
            <pathelement location="${build.test.classes.dir}"/>
            <pathelement location="${tools.jar}"/>
            <path refid="emma.lib"/>
        </path>
        
        <mkdir dir="${build.test.classes.dir}"/>
        <mkdir dir="${build.test.results.dir}"/>
        <javac srcdir="${test.src.dir}" 
               destdir="${build.test.classes.dir}" debug="true" 
               classpathref="test.classpath"/>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="**/*.java"/>
        </copy>
        <junit2 showoutput="true" fork="true" forkmode="once" dir="${basedir}" 
                failureproperty="tests.failed" errorproperty="tests.failed">
            <batchtest fork="true" todir="${build.test.results.dir}">
                <fileset dir="${test.src.dir}" includes="**/*Test.java"/>
            </batchtest>
            <classpath refid="test.classpath"/>
            <syspropertyset>
                <propertyref prefix="test-sys-prop."/>
                <mapper type="glob" from="test-sys-prop.*" to="*"/>
            </syspropertyset>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
            <jvmarg line="${run.jvmargs}"/>
            
            <jvmarg value="-Demma.coverage.out.file=build/emma/coverage.emma"/>
            <jvmarg value="-Demma.coverage.out.merge=true"/>
        </junit2>

        <path id="src.ref" >
          <pathelement location="${src.api.dir}" />
          <pathelement location="${src.gen-src.dir}" />
          <pathelement location="${src.impl.dir}" />
          <pathelement location="${src.spi.dir}" />
        </path>
        
        <emma enabled="true">
          <report sourcepathref="src.ref" >
            <fileset dir="build/emma" >
              <include name="*.emma" />
            </fileset>

            <xml outfile="build/emma/coverage.xml" />
            <html outfile="build/emma/coverage.html" />
          </report>
        </emma> 
    </target>
    
    <target name="clean-tests" depends="init">
        <delete dir="${build.test.classes.dir}"/>
    </target>
    
    
    <!-- Emma tasks -->
 
    <target name="-check-emma">
        <available file="emma/emma.zip" property="emmaExists"/>
    </target>

    <target name="-get-emma" depends="-check-emma" unless="emmaExists">
        <mkdir dir="emma"/>
        <get src="http://downloads.sourceforge.net/emma/emma-2.0.5312.zip" dest="emma/emma.zip"/>
        <unzip src="emma/emma.zip" dest="emma/"/>
    </target>

    <!-- Findbugs tasks -->

    <target name="-check-findbugs">
        <available file="findbugs/findbugs.zip" property="findbugsExists"/>
    </target>
    
    <target name="-get-findbugs" depends="-check-findbugs" unless="findbugsExists">
        <mkdir dir="findbugs"/>
        <get src="http://prdownloads.sourceforge.net/findbugs/findbugs-1.2.1.zip?download" dest="findbugs/findbugs.zip"/>
        <unzip src="findbugs/findbugs.zip" dest="findbugs/"/>
    </target>
    
    <target name="findbugs" depends="-get-findbugs, jar">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
            <classpath>
                <pathelement path="findbugs/findbugs-1.2.1/lib/findbugs-ant.jar" />
            </classpath>
        </taskdef>
        <mkdir dir="build/findbugs"/>
        <findbugs home="findbugs/findbugs-1.2.1"
                  output="xml:withMessages"
                  outputFile="build/findbugs/findbugs.xml" >
            <auxClasspath>
                <fileset dir="${basedir}/lib" includes="*.jar"/>
                <pathelement location="${tools.jar}"/>
            </auxClasspath>
            <sourcePath path="src" />
            <class location="dist/jersey.jar" />
        </findbugs>	
    </target>
    
    <!-- Maven tasks -->

     <target name="-check-maven-task">
         <available file="maven/maven-repository-importer.jar" property="mavenExists" />
     </target>

     <target name="-get-maven-task" depends="-check-maven-task" unless="mavenExists">
         <get src="https://maven-repository.dev.java.net/nonav/repository/com.sun.wts.tools.mri/jars/maven-repository-importer-1.2.jar" dest="maven/maven-repository-importer.jar" />
     </target>

     <target name="push-to-maven-prepare" depends="dist-release,-get-maven-task" description="Generates a Maven repository">
         <taskdef resource="maven-repository-importer.properties">
             <classpath>
                 <pathelement path="maven/maven-repository-importer.jar" />
             </classpath>
         </taskdef>
         <!-- clean it -->
         <delete dir="build/maven-repo" />
         <maven-repository-importer destdir="build/maven-repo" version="${release.spec.version}">
             <artifact jar="dist/jsr311/lib/jsr311-api.jar" pom="maven/jsr311-pom.xml" srczip="dist/jsr311/lib/jsr311-api.src.zip" />
         </maven-repository-importer>
         <maven-repository-importer destdir="build/maven-repo" version="${release.impl.version}-${release.impl.version.suffix}">
             <artifact jar="dist/jersey.jar" pom="maven/jersey-pom.xml" srczip="dist/jersey.src.zip" />
             <filterset>
                 <filter token="JSR311_VERSION" value="${release.spec.version}" />
             </filterset>
         </maven-repository-importer>
     </target>

    <!-- JSON lexical analyzer related tasks -->

    <target name="-check-jflex-exists">
	<available file="lib/aux/JFlex.jar" property="jflexAvailable"/>
    </target>

    <target name="-get-jflex" depends="-check-jflex-exists" unless="jflexAvailable">
      <mkdir dir="lib/aux"/>
      <get src="http://jflex.de/jflex-1.4.1.zip" dest="lib/aux/jflex.zip"/>
      <unzip src="lib/aux/jflex.zip" dest="lib/aux">
        <patternset>
         <include name="jflex-1.4.1/lib/JFlex.jar"/>
        </patternset>
      </unzip>
      <move file="lib/aux/jflex-1.4.1/lib/JFlex.jar" todir="lib/aux"/>
      <delete dir="lib/aux/jflex-1.4.1" file="lib/aux/jflex.zip"/>
    </target>

    <target name="regenerate-json-lexer" depends="-get-jflex" description="Regenerates JSON lexer from it's jflex definition in etc/json.flex">
      <java jar="lib/aux/JFlex.jar" fork="true">
        <arg value="--nobak"/>
        <arg value="-d"/>
        <arg path="src/impl/com/sun/ws/rest/impl/json/reader"/>
        <arg value="etc/json.flex"/>
      </java>
    </target>
</project>
